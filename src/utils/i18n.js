import * as vscode from "vscode";

export const i18n = {
  en: {
    workspace: "Workspace",
    id: "ID",
    status: "Status",
    updated: "Updated at",
    version: "Terraform version",
    message: "Message",
    confirmApply: "Confirm Apply",
    noManualApply: "This run does not require manual apply.",
    planChanges: "Plan Changes",
    noChanges: "No plan details available.",
    action: "Action",
    resource: "Resource",
    provider: "Provider",
    toAdd: "to add",
    toChange: "to change",
    toDestroy: "to destroy",
    summary: (add, change, destroy) =>
      `📝 ${add} to add, ${change} to change, ${destroy} to destroy`,
    promptOrg: "Terraform Cloud organization name",
    promptToken: "Terraform Cloud token",
    invalidToken: "❌ Invalid token or insufficient permissions.",
    uploadLabel: "Select .tfvars file",
    uploadSuccess: (name) => `✅ File uploaded to ${name}`,
    uploadError: (err) => `❌ Upload error: ${err}`,
    downloadLabel: "Save .tfvars file",
    downloadSuccess: (name) => `✅ File saved from ${name}`,
    downloadError: (err) => `❌ Download error: ${err}`,
    loggedOut: "🔒 Logged out. Run 'Login' to reconnect.",
    refreshing: "🔄 Refreshing...",
    noOrganizationsFound: "No organizations found.",
    selectOrganization: "Select an organization",
    organizationFetchError: "Error fetching organizations: ",
  },
  es: {
    workspace: "Espacio de trabajo",
    id: "ID",
    status: "Estado",
    updated: "Actualizado",
    version: "Versión de Terraform",
    message: "Mensaje",
    confirmApply: "Confirmar Apply",
    noManualApply: "Este run no requiere apply manual.",
    planChanges: "Cambios en el plan",
    noChanges: "No hay detalles del plan disponibles.",
    action: "Acción",
    resource: "Recurso",
    provider: "Proveedor",
    toAdd: "para agregar",
    toChange: "para cambiar",
    toDestroy: "para destruir",
    summary: (add, change, destroy) =>
      `📝 ${add} para agregar, ${change} para cambiar, ${destroy} para destruir`,
    promptOrg: "Nombre de la organización en Terraform Cloud",
    promptToken: "Token de Terraform Cloud",
    invalidToken: "❌ Token inválido o sin permisos.",
    uploadLabel: "Seleccionar archivo .tfvars",
    uploadSuccess: (name) => `✅ Archivo subido a ${name}`,
    uploadError: (err) => `❌ Error al subir: ${err}`,
    downloadLabel: "Guardar archivo .tfvars",
    downloadSuccess: (name) => `✅ Archivo guardado desde ${name}`,
    downloadError: (err) => `❌ Error al descargar: ${err}`,
    loggedOut: "🔒 Sesión cerrada. Ejecutá 'Iniciar sesión' para reconectar.",
    refreshing: "🔄 Actualizando...",
    noOrganizationsFound: "No se encontraron organizaciones.",
    selectOrganization: "Seleccioná una organización",
    organizationFetchError: "Error al obtener organizaciones: ",
  },
};

export const translate =
  i18n[vscode.env.language.startsWith("es") ? "es" : "en"];
